/*
Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, 
we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?
*/
//9183
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>
#include <cmath>
using namespace std;

const int upperlimit = 100;
int data[] = {4, 8, 9, 16, 25, 27, 32, 36, 49, 64, 81, 100};
vector<int> datav(data, data + sizeof(data) / sizeof(int));

struct t
{
	int base;
	int power;
};

struct t simplify(int x)
{
	vector<int>::iterator it = find(datav.begin(), datav.end(), x);
	if(it != datav.end())
	{
		switch(*it)
		{
			case 4:
			{
				t temp = {2, 2};
				return temp;
			}
			case 8:
			{
				t temp = {2, 3};
				return temp;
			}
			case 16:
			{
				t temp = {2, 4};
				return temp;
			}
			case 32:
			{
				t temp = {2, 5};
				return temp;
			}
			case 64:
			{
				t temp = {2, 6};
				return temp;
			}
			case 9:
			{
				t temp = {3, 2};
				return temp;
			}
			case 27:
			{
				t temp = {3, 3};
				return temp;
			}
			case 81:
			{
				t temp = {3, 4};
				return temp;
			}
			case 25:
			{
				t temp = {5, 2};
				return temp;
			}
			case 36:
			{
				t temp = {6, 2};
				return temp;
			}
			case 49:
			{
				t temp = {7, 2};
				return temp;
			}
			case 100:
			{
				t temp = {10, 2};
				return temp;
			}
		}
	}
	else
	{
		t temp = {0, 0};
		return temp;
	}
}

int main()
{
	vector<struct t> v;
	for(int a = 2; a <= upperlimit; ++a)
	{
		for(int b = 2; b <= upperlimit; ++b)
		{
			t temp = simplify(a);
			if(temp.base)
			{
				temp.power *= b;
				v.push_back(temp);
			}
			else
			{
				temp.base = a;
				temp.power = b;
				v.push_back(temp);
			}
		}
	}
	for(vector<struct t>::iterator it = v.begin(); it != v.end(); ++it)
	{
		for(vector<struct t>::iterator next = it + 1; next != v.end(); ++next)
		{
			if((*next).base == (*it).base && (*next).power == (*it).power)
			{
				v.erase(next);
			}
		}
	}
	for(int i = 0; i < v.size(); ++i)
	{
		cout << i + 1 << " base: " << v[i].base << " power: " << v[i].power << endl;
	}
	cout << v.size() << endl;

	return 0;
}