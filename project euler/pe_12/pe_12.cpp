/*
project euler problem 12
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/
#include <iostream>
#include <fstream>
using namespace std;

const int n = 500;
const int begin = 1;

int divisor(long long x)
{
	int i, cnt;

	for(i = 1, cnt = 0; i <= x; ++i)
	{
		if(!(x % i))
		{
			++cnt;
		}
	}

	return cnt;
}

int main()
{
	int i, d;
	long long a;
	ofstream file("E:\\重要文档\\programs\\project_euler\\pe_12\\data.txt", ios_base::app);

	if(!file)
	{
		cerr << "超耐磨，文件无法打开。" << endl;
	}
	else
	{
		file << endl << "本次运行开始……" << endl;
		for(i = begin; ; ++i)
		{
			a = i * (i + 1) / 2;
			d = divisor(a);
			cout << i << " " << a << " " << d << endl;
			file << i << " " << a << " " << d << endl;
			if(d > n)
			{
				cout << a << endl;
				file << a << endl;
				file.close();
				break;
			}
		}
	}

	return 0;
}